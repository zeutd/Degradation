plugins{
    id 'java'
    id 'com.github.GlennFolker.EntityAnno' version "$entVersion"
}

version '1.0'

sourceSets.main.java.srcDirs = ["/main/src"]

repositories{
    mavenCentral()
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven{ url  'https://raw.githubusercontent.com/Zelaux/Repo/master/repository' }
    maven{ url 'https://www.jitpack.io' }
    maven{url 'https://oss.sonatype.org/content/repositories/snapshots/'}
    maven{url 'https://oss.sonatype.org/content/repositories/releases/'}
    maven{url 'https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository'}
}

java{
    sourceCompatibility = 17
    tasks.withType(JavaCompile).configureEach{
        sourceCompatibility = 17
        options.release = 8

        options.incremental = true
        options.encoding = 'UTF-8'
    }
}

ext{
    //the build number that this mod is made for
    //mindustryVersion = 'v146'
    //jabelVersion = "93fde537c7"
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
    gamePath = "D:/mdt/V7/Mindustry.exe"
    modPath = "${System.getenv("USERPROFILE")}/AppData/Roaming/Mindustry/mods"
    isWindows = System.getProperty("os.name").toLowerCase().contains("windows")

    arc = {String module ->
        return "com.github.Anuken.Arc$module:$arcVersion"
    }
    arcLibrary = {String module ->
        return "com.github.Zelaux.ArcLibrary$module:$arcLibraryVersion"
    }
    mindustry = {String module ->
        return "com.github.Anuken.Mindustry$module:$mindustryVersion"
    }
}

//java 8 backwards compatibility flag
/*allprojects{
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }
}*/

dependencies{
    // i.
    compileOnly "${mindustry(':core')}"
    compileOnly "${arc(':arc-core')}"
    implementation "${arcLibrary(':graphics-draw3d')}"
    implementation "${arcLibrary(':graphics-g3d')}"
    implementation "${arcLibrary(':graphics-extendedDraw')}"
    implementation 'com.github.liplum:MultiCrafterLib:v1.8'

    // ii.
    annotationProcessor "com.github.GlennFolker.EntityAnno:downgrader:$entVersion"

    // iii.
    compileOnly "com.github.GlennFolker.EntityAnno:entity:$entVersion"
    // iv.
    kapt "com.github.GlennFolker.EntityAnno:entity:$entVersion"
}

entityAnno{
    modName = 'disintegration'
    mindustryVersion = project['mindustryVersion']
    revisionDir = file("$rootDir/revisions/")
    fetchPackage = 'disintegration.fetched'
    genSrcPackage = 'disintegration.entities.comp'
    genPackage = 'disintegration.gen.entities'
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.")

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}

        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        def d8 = isWindows ? "d8.bat" : "d8"

        //dex and desugar files - this requires d8 in your PATH
        "$d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar{
    archiveFileName = "${project.archivesBaseName}Desktop.jar"

    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
    }

    from("/main/assets/"){
        include "**"
    }
}

task deploy(type: Jar){
    dependsOn jar
    dependsOn jarAndroid
    archiveFileName = "${project.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}

task testMod {
    dependsOn deploy
    doLast {
        delete{
            delete "${modPath}/${project.archivesBaseName}.jar"
        }
        copy {
            from "$buildDir/libs/${project.archivesBaseName}.jar"
            into modPath
        }
        exec {
            commandLine 'cmd', "/c", "${gamePath}"
        }
    }
}

task testModDesktop {
    dependsOn jar
    doLast {
        delete{
            delete "${modPath}/${project.archivesBaseName}.jar"
        }
        copy {
            from "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            into modPath
            rename ("${project.archivesBaseName}Desktop.jar", "${project.archivesBaseName}.jar")
        }
        exec {
            commandLine 'cmd', "/c", "${gamePath}"
        }
    }
}

task testModAndroid {
    dependsOn deploy
    doLast {
        exec {
            commandLine 'cmd', "/c", "android-test.bat $buildDir/libs/${project.archivesBaseName}.jar"
        }
    }
}

task testOpenGame {
    doLast {
        exec {
            commandLine 'cmd', "/c", "${gamePath}"
        }
    }
}